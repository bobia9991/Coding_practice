####### initial settings
configfile: "/mnt/Data/Practice/RRBS_Snakemake/wrapper/config.yaml"


###### needed libraries
import pandas as pd
import os
from datetime import datetime


###### create temp, logs_for_mail, pre_trim_qc, and post_trim_qc folders

# sanity check the f-string
mkdir_temp = f'mkdir -p {config["workdir"]}/{config["temp"]}'
mkdir_logs_for_mail = f'mkdir -p {config["workdir"]}/{config["logs_for_mail"]}'
mkdir_pre_trim_qc = f'mkdir -p {config["workdir"]}/{config["pre_trim_qc"]}'
mkdir_post_trim_qc = f'mkdir -p {config["workdir"]}/{config["post_trim_qc"]}'
print(f'{mkdir_temp}\n{mkdir_logs_for_mail}\n{mkdir_pre_trim_qc}\n{mkdir_post_trim_qc}')

# execute the commands
os.system(mkdir_temp)
os.system(mkdir_logs_for_mail)
os.system(mkdir_pre_trim_qc)
os.system(mkdir_post_trim_qc)


###### get input from a CSV file

###### dataset
# storing dataset in a seperated file for creating efforlessly a csv file.
samples_table = pd.read_csv("sample.csv").set_index("sample", drop = False)

# read1: input function definition
def r1_from_sample(wildcards):
    return samples_table.loc[wildcards.sample, "fastq1"]

# read2: input function definition
def r2_from_sample(wildcards):
    return samples_table.loc[wildcards.sample, "fastq2"]

# extract Sample name as a list using in the expand function below
INDEXES = ["1", "2"]
SAMPLES = list(samples_table['sample'])


###### rule settings

# set 'rule all' for using wildcards
rule all:
    input:
        # expand("pre_trim_qc/{sample}_fastqc.html"),
        expand(
            [
                "pre_trim_qc/{sample}_{index}_fastqc.html",
                "trimmed/{sample}/{sample}_{index}.trimmed.fastq",
                "trimmed/{sample}/{sample}_{index}.trimmed.unpaired.fastq",
                "mapped/{sample}/{sample}_1.trimmed_bismark_bt2_pe.bam",
                "mapped/{sample}/{sample}_1.trimmed_bismark_bt2_PE_report.txt",
                "mapped/{sample}/{sample}_1.trimmed_bismark_bt2_pe.nucleotide_stats.txt",
                "post_trim_qc/{sample}_{index}.trimmed_fastqc.html"
            ],
            sample=SAMPLES, index=INDEXES
        )

rule pre_trim_qc:
    message:
        """
            Step 01: Quality check the {input} file before trimming.
            This is a pilot dataset extracted from the first 120k lines of the actual dataset.
        """
    input:
        "reads/{sample}_{index}.fastq"
    output:
        "pre_trim_qc/{sample}_{index}_fastqc.html"

    params:
        "pre_trim_qc/"
    log:
        "pre_trim_qc/{sample}_{index}.log"

    threads: 2
    output:
    shell:
        """
            echo "Step 01: Quality check the {input} file before trimming." |& tee -a {log}
            echo "The process is started at\t$(date '+%F %T')" | column |& tee -a {log}
            start=$(date +%s.%N)
            
            fastqc \
                -t {threads} \
                --nogroup \
                --outdir {params} \
                {input} |& tee -a {log}

            echo "The process finished at \t$(date '+%F %T')" | column |& tee -a {log}
            end=$(date +%s.%N)

            length=$(echo "$end - $start" | bc)
            day_length=$(echo "$length/86400" | bc)
            convert_to_day=$(echo "$length-86400*$day_length" | bc)
            hour_length=$(echo "$convert_to_day/3600" | bc)
            convert_to_hour=$(echo "$convert_to_day-3600*$hour_length" | bc)
            minutes=$(echo "$convert_to_hour/60" | bc)
            senconds=$(echo "$convert_to_hour-60*$minutes" | bc)
            LC_NUMERIC=C printf "Total runtime: %d days, %02d hours, %02d minutes, %02.4f seconds\n" \
                $day_length $hour_length $minutes $senconds |& tee -a {log}
        """

rule trimmomatic_pe:
    message:
        """
            Step 02: Trimming Illumina adapters from {input.r1} and {input.r2}.
            This is a pilot dataset extracted from the first 120k lines of the actual dataset.
        """

    input:
        adapter = "/usr/local/bin/Trimmomatic-0.39/adapters/TruSeq3-PE-2.fa",
        r1 = r1_from_sample,
        r2 = r2_from_sample

    output:
        output_r1="trimmed/{sample}/{sample}_1.trimmed.fastq",
        output_r1_unpaired="trimmed/{sample}/{sample}_1.trimmed.unpaired.fastq",
        output_r2="trimmed/{sample}/{sample}_2.trimmed.fastq",
        output_r2_unpaired="trimmed/{sample}/{sample}_2.trimmed.unpaired.fastq"

    log:
        "trimmed/{sample}/{sample}.log"

    threads: 8

    shell:
        """
            echo "Step 02: Trimming Illumina adapters from {input.r1} and {input.r2}" |& tee -a {log}
            echo "The process is started at\t$(date '+%F %T')" | column |& tee -a {log}
            start=$(date +%s.%N)
            trimmomatic PE \
                -threads {threads} \
                -phred33 \
                {input.r1} {input.r2} \
                {output.output_r1} {output.output_r1_unpaired} \
                {output.output_r2} {output.output_r2_unpaired} \
                ILLUMINACLIP:{input.adapter}:2:30:10 \
                HEADCROP:15 \
                TRAILING:3 \
                SLIDINGWINDOW:4:15 \
                MINLEN:36 |& tee -a {log}
            
            echo "The process finished at \t$(date '+%F %T')" | column |& tee -a {log}
            end=$(date +%s.%N)

            length=$(echo "$end - $start" | bc)
            day_length=$(echo "$length/86400" | bc)
            convert_to_day=$(echo "$length-86400*$day_length" | bc)
            hour_length=$(echo "$convert_to_day/3600" | bc)
            convert_to_hour=$(echo "$convert_to_day-3600*$hour_length" | bc)
            minutes=$(echo "$convert_to_hour/60" | bc)
            senconds=$(echo "$convert_to_hour-60*$minutes" | bc)
            LC_NUMERIC=C printf "Total runtime: %d days, %02d hours, %02d minutes, %02.4f seconds\n" \
                $day_length $hour_length $minutes $senconds |& tee -a {log}
            
            grep -E "Trimming|started at|finished at|Total runtime" {log} >> temp/02_trimming_process.log
            echo "========================================================" >> temp/02_trimming_process.log
        """

rule post_trim_qc:
    message:
        """
            Step 03: Quality check the {input} file after trimmed.
            This is a pilot dataset extracted from the first 120k lines of the actual dataset.
        """
    input:
        "trimmed/{sample}/{sample}_{index}.trimmed.fastq"
    output:
        "post_trim_qc/{sample}_{index}.trimmed_fastqc.html"

    params:
        "post_trim_qc/"
    log:
        "post_trim_qc/{sample}_{index}.log"

    threads: 2
    output:
    shell:
        """
            echo "Step 03: Quality check the {input} file after trimmed." |& tee -a {log}
            echo "The process is started at\t$(date '+%F %T')" | column |& tee -a {log}
            start=$(date +%s.%N)
            
            fastqc \
                -t {threads} \
                --nogroup \
                --outdir {params} \
                {input} |& tee -a {log}

            echo "The process finished at \t$(date '+%F %T')" | column |& tee -a {log}
            end=$(date +%s.%N)

            length=$(echo "$end - $start" | bc)
            day_length=$(echo "$length/86400" | bc)
            convert_to_day=$(echo "$length-86400*$day_length" | bc)
            hour_length=$(echo "$convert_to_day/3600" | bc)
            convert_to_hour=$(echo "$convert_to_day-3600*$hour_length" | bc)
            minutes=$(echo "$convert_to_hour/60" | bc)
            senconds=$(echo "$convert_to_hour-60*$minutes" | bc)
            LC_NUMERIC=C printf "Total runtime: %d days, %02d hours, %02d minutes, %02.4f seconds\n" \
                $day_length $hour_length $minutes $senconds |& tee -a {log}
        """

rule bismark_meth:
    message:
            """
                Step 04: Mapping to Reference Genome from {input.r1} and {input.r2}.
                This is a pilot dataset extracted from the first 120k lines of the actual dataset.
            """

    input:
        genome_index = "/mnt/Data/Practice/reference_genome/GRCh38",
        r1 = rules.trimmomatic_pe.output.output_r1,
        r2 = rules.trimmomatic_pe.output.output_r2
    
    output:
        bam = "mapped/{sample}/{sample}_1.trimmed_bismark_bt2_pe.bam",
        report = "mapped/{sample}/{sample}_1.trimmed_bismark_bt2_PE_report.txt",
        nu_cov = "mapped/{sample}/{sample}_1.trimmed_bismark_bt2_pe.nucleotide_stats.txt"

    params:
        out_dir = "mapped/{sample}",
        temp_dir = "mapped/{sample}/temp"

    log:
        "mapped/{sample}/{sample}.log"

    threads: 2

    shell:
        """
            echo "Step 04: Mapping to Reference Genome from {input.r1} and {input.r2}" |& tee -a {log}
            echo "The process is started at\t$(date '+%F %T')" | column |& tee -a {log}
            start=$(date +%s.%N)

            bismark \
                --parallel {threads} \
                --genome {input.genome_index} \
                --fastq \
                -N 0 \
                -L 20 \
                --minins 0 \
                --maxins 600 \
                --nucleotide_coverage \
                --output_dir {params.out_dir} \
                --temp_dir {params.temp_dir} \
                -1 {input.r1} \
                -2 {input.r2} |& tee -a {log}
            
            echo "The process finished at \t$(date '+%F %T')" | column |& tee -a {log}
            end=$(date +%s.%N)

            length=$(echo "$end - $start" | bc)
            day_length=$(echo "$length/86400" | bc)
            convert_to_day=$(echo "$length-86400*$day_length" | bc)
            hour_length=$(echo "$convert_to_day/3600" | bc)
            convert_to_hour=$(echo "$convert_to_day-3600*$hour_length" | bc)
            minutes=$(echo "$convert_to_hour/60" | bc)
            senconds=$(echo "$convert_to_hour-60*$minutes" | bc)
            LC_NUMERIC=C printf "Total runtime: %d days, %02d hours, %02d minutes, %02.4f seconds\n" \
                $day_length $hour_length $minutes $senconds |& tee -a {log}
            
            grep -E "Mapping to|started at|finished at|Total runtime" {log} >> temp/03_mapping_process.log
            echo "========================================================" >> temp/03_mapping_process.log
        """

#### tracking the outcome of the workflow
# if succeeded, print out the log file of each rule (each rule will have a individual log.)
# for example, cat logs_for_mail/*_process.log > whole_process.log
# then email with the whole_process.log.
onsuccess:
    print("Workflow finished, no error")
    ###### sanity check the output logs
    for rulename in dir(rules):
        the_rule = getattr(rules, rulename)
        if hasattr(the_rule, "log"):
            mess = (
                f'the log files of the rule <{rulename}> are:\t'
                f'{expand(getattr(the_rule, "log"), sample=SAMPLES, index=INDEXES)}'
            )
            print(mess)
    ###### email
    # shell(
    #     "cat temp/*_process.log > logs_for_mail/whole_workflow.log; "
    #     "cat logs_for_mail/whole_workflow.log | mutt -s \"Success\" -- thanhbinh9991@gmail.com; "
    #     "rm -rf temp/*.log logs_for_mail/*.log"
    # )

# if failed, email with the snakemake log
onerror:
    print("An error occurred")
    ###### email with the log of Snakemake
    shell(
        "tail {log} | mutt -s \"An error occurred, please check the log\" -- thanhbinh9991@gmail.com"
    )